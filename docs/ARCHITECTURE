This file contains miscellaneous notes from the early days of the design
of js-multigraph (2012).  What is written here is not necessarily true 
or reflected in the current code --- it's just a summary of notes from
various conversations we had while designing Multigraph.

=========================================================================

EVENT CATCHER
  Registers listeners for basic events; the listeners call the event-to-action translator code below.

EVENT-TO-ACTION TRANSLATOR
  Translates basic events into the actions below.

CORE ACTIONS
  These are basic operations, implemented in core, that carry out the
  work involved in making things happen in the graph, typically in
  response to user interaction.  Things like panning or zooming along
  an axis, having a data tip appear or disappear, turning a plot on or
  off, etc.  They are expressed in terms of an API that the core
  exposes to non-core code.  This API uses parameters that involve
  "pure" quantities such as points, vectors, references to axes,
  plots, etc --- no references to specific events like mouse down,
  drag, etc.  This API could, in principle, be used in a scripting
  language to drive a programmed animation of the graph that would
  simulate user interaction, but is independent of specific events.

  Examples of core actions:
    doPan(axis, base, vector): causes the dataMin/dataMax values of an axis to be modified in a 'pan' motion
    doZoom(axis, base, vector): causes the dataMin/dataMax values of an axis to be modified in a 'zoom' motion
    doDataTip(plot, point): causes the given plot to update its display of data tips, if any, to show whatever
      tip is appropriate for the given point, if any.  This might involve turning off a previously displayed
      data tip, and may or may not actually involve displaying a data tip at all, depending on the location
      of the given point. ????  Need to think about this.  As currently written, this seems too event specific,
      not generic enough.  But I'm not sure how to fix that.



use cases to think through:

    {canvas,svg} rendering / {mouse,touch,gesture} interaction


------------------------------------------------------------------------

diagram from code review meeting of 7/30/12:

core                                  parser                       graphics/canvas
----                                  ------                       ---------------
     
Multigraph                            Multigraph                   Multigraph
|                                     |-parse(...)                 |
|                                     |                            |-hasA("context")
|                                     |                            |-createCanvasGraph(...) {
|                                     |                            |   this.context(...)
|                                     |                            | }
|                                     |                            |-render() {
|                                     |                            |   graph.render(this.context(), width, height)
|                                     |                            | }
|                                     |                            |
|-Graph                               |-Graph                      |-Graph
  |                                     |-parse(...)               | render(context, width, height) {
  |                                     |                            |   axis.render(this, context)
  |                                     |                            |   plot.render(this, context)
  |                                     |                            | }
  |                                     |                            |
  |-Axis                                |-Axis                       |-Axis
  |                                     | |-parse(...)               | |-render(graph, context) {...}
  |                                     |                            |
  |-Plot                                |-Plot                       |-Plot
    |-render(graph,gContext) {          |-parse(...)                 |
    |   renderer.begin(gContext)        |                            |
    |   renderer.dataPoint()            |                            |
    |   renderer.end()                  |                            |
    | }                                 |                            |
    |                                   |                            |
    |-Renderer                          |-Renderer                   |-Renderer
    |                                   | |-parse(...)               |
    |                                   |                            |
    |-PointlineRenderer                 |-PointlineRenderer          |-PointlineRenderer
                                                                       |-begin(context)
                                                                       |-dataPoint(p) {...}
                                                                       |-end() {...}



========================================================================


This file describes the overall architecture of the Multigraph source
code, at a very general level.  This documentation is under
construction and is currently incomplete (and possibly inaccurate) in
several ways -- don't take it literally!

========================================================================

OVERVIEW OF CLASS HIERARCHY
---------------------------

DataValueType: enum [ NUMBER, DATETIME, ... ]
DataValue
  NumberValue
  DatetimeValue
    DatetimeUnit: enum [ MILLISECOND, SECOND, MINUTE, HOUR, DAY, WEEK, MONTH, YEAR ]
DataMeasure
  NumberMeasure
  DatetimeMeasure
Formatter
  NumberFormatter
  DatetimeFormatter
Labeler                (can be rewritten completely in terms of DataValue/DataMeasure and Formatter instances; no need for type-specific subclasses?)
  XXX NumberLabeler    (can be eliminated?)
  XXX DatetimeLabeler  (can be eliminated?)
Axis
Legend
Title
Data
  ArrayData
  CSVData
  WebServiceData
DataIterator
Plot
Graph
Multigraph

========================================================================

MORE DETAILS
------------

DataValueType: enum [ NUMBER, DATETIME, ... ]

DataValue
  getRealValue():number
  compareTo(v:DataValue):int
  add(d:DataMeasure):DataValue
  -- NumberValue (subclass of DataValue)
  -- DatetimeValue (subclass of DataValue)

DataMeasure
  getRealValue():number
  firstSpacingLocationAtOrAfter(v:DataValue, alignment:DataValue):DataValue
  -- NumberMeasure (subclass of DataMeasure)
       NumberMeasure(x:number) [[ constructor ]]
  -- DatetimeMeasure (subclass of DataMeasure)
       DatetimeMeasure(x:number, unit:DatetimeUnit) [[ constructor ]]

DatetimeUnit: enum [ MILLISECOND, SECOND, MINUTE, HOUR, DAY, WEEK, MONTH, YEAR ]

Formatter
  format(v:DataValue):String
  getMaxLength():int
  Formatter.create(type:DataValueType, formatString:String):Formatter
  -- NumberFormatter (subclass of Formatter)
  -- DatetimeFormatter (subclass of Formatter)

Labeler
  Labeler(type:DataValueType,
          axis:Axis,
          spacing:DataMeasure,
          formatString:String,
          start:DataValue,
          position:DPoint,
          angle:number,
          anchor:DPoint) [[ constructor ]]
  axis:Axis
  labelDensity():number
  prepare(min:DataValue,max:DataValue)
  hasNext():boolean
  next():DataValue
  renderLabel(v:DataValue)

Axis
  dataValueType:DataValueType
  haveDataMin():Boolean
  haveDataMax():Boolean
  dataMin:number
  dataMax:number
  dataValueToAxisValue(v:DataValue)
  currentLabeler:Labeler
  currentLabelDensity:number
  labelers:Array<Labeler>
  drawGrid:Boolean
  pepareRender()
    [[ Set currentLabeler to the Labeler in the labelers array returning the largest density <= 0.8,
       unless all have density > 0.8, in which case we take the one with the smallest density.
       Also set currentLabelDensity to the density of currentLabeler. ]]

  renderGrid(...)
    [[ if geometry is not yet initialized, return immediately ]]
    [[ if (!haveDataMin() || !haveDataMax()) return immediately ]]
    prepareRender()
    [[ if !drawGrid return now ]]
    currentLabeler.prepare(dataMin, dataMax)
    while (currentLabeler.hasNext()) {
      var v:DataValue = currentLabeler.next()
      var a:number = dataValueToAxisValue(v)
      [[ draw horizontal or vertical line across plotarea at location 'a' on axis ]]
    }

  render(...)
    [[ draw the axis line itself ]]
    [[ draw the axis title, if any ]]
    [[ if (!haveDataMin() || !haveDataMax()) return now ]]
    currentLabeler.prepare(dataMin, dataMax)
    while (currentLabeler.hasNext()) {
      var v:DataValue = currentLabeler.next()
      var a:number = dataValueToAxisValue(v)
      [[ draw tick mark at location 'a' on axis ]]
      currentLabeler.renderLabel(v)
    }

Legend
  initializeGeometry()
  render(...)

Title
  initializeGeometry()
  render(...)

Graph
   var axes:Array<Axis>
   var plots:Array<Plot>
   var datas:Array<Data>
   initializeGeomery(...)
      [[ set various internally used computed geometric values ]]
      foreach axis { axis.initializeGeometry() }
      legend.initializeGeometry()
   render(...)
      [[ clear screen ]]
      [[ draw border (between margin and padding area) ]]
      [[ draw background color, if any, clipped to padding area ]]
      [[ draw background image, if any, clipped to padding area ]]
      [[ draw plotbox border, if any, clippped to padding area ]]
      foreach axis { axis.renderGrid(...) }
      foreach plot { plot.render(...) }
      foreach axis { axis.render(...) }
      legend.render(...)
      title.render(...)

Plot
  var haxis:Axis
  var vaxis:Axis
  var renderer:Renderer
  render(...)

  -- DataPlot (subclass of Plot)
  --   var data:Data
  --   render(...)
  --     var iter:DataIterator = data.getIterator(..., haxis.dataMin, haxis.dataMax, 1)
  --     renderer.begin(sprite)
  --     while (iter.hasNext()) {
  --         var vals:Array<DataValue> = iter.next()
  --         renderer.dataPoint(vals)
  --     }
  --     renderer.end()

Data
  onReady(callback:Function) // specify a callback to be called when new data is available for a previously requested data range
  getIterator(variable:Array<DataVariable>, min:Number, max:Number, buffer:int):DataIterator
  -- ArrayData (subclass of Data)
  -- CSVData (subclass of Data)
  -- WebServiceData (subclass of Data)

DataIterator
  hasNext():Boolean
  next():Array<DataValue>

DataVariable
  id:String
  column:int
  type:DataValueType
  isMissing(v:DataValue)
  DataVariable(id:String, column:int, type:DataType, missingValue:DataValue, missingOpString:String) [[ constructor ]]
